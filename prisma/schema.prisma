// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId     String            @unique
  name            String?
  email           String            @unique
  imageUrl        String?
  industry        String?
  uploadedAt      DateTime          @default(now())
  createdAt       DateTime          @default(now())
  bio             String?
  experience      Int?
  skills          String[]

  assessments     Assessment[]
  interviews      Interview[]
  resume          Resume?
  coverletter     CoverLetter?      // âœ… only one cover letter per user
  industryInsights industryInsights? @relation(fields: [industry], references: [industry])
}

model industryInsights {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  industry       String   @unique
  users          User[]

  salaryRanges   Json[]

  growthRate     Float
  demandLevel    DemandLevel
  topSkills      String[]

  marketOutlook  MarketOutlook
  keyTrends      String[]

  recommendedSkills  String[]

  lastUpdated     DateTime  @default(now())
  nextUpdate      DateTime
}

model Assessment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String
  createdAt      DateTime @default(now())
  uploadedAt     DateTime @default(now())

  @@index([userId])
}

model Resume {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique @db.ObjectId
  content        String
  createdAt      DateTime @default(now())
  uploadedAt     DateTime @default(now())
}

model Interview {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  question       String
  answer         String
  aiFeedback     String
  createdAt      DateTime @default(now())
}


model CoverLetter {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique @db.ObjectId
  content          String
  jobDescription   String
  companyName      String
  jobTitle         String
  uploadedAt       DateTime @default(now())
  createdAt        DateTime @default(now())
}


enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}
  enum MarketOutlook{
    POSITIVE
    NEUTRAL
    NEGATIVE
  }
